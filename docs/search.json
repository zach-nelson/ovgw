[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Groundwater data processing",
    "section": "",
    "text": "Depth to water measurements from LADWP monitoring wells are provided to ICWD after the end of each water year. Data is exported from WISKI (water information system by Kisters) in ZRXP format, an ASCII data exchange file format with a repeating header-data structure. These .DAT text files can be opened in a text editor or excel for processing, but here they are programmatically parsed, processed, appended to the active internal database and formatted and exported for the annual OVGA data management system updates.\nSummary information about the processing, number of records dropped etc, and indicator well hydrographs for visual QA/QC are provided. The most recent OVGA depth to water import template instructions are included as an appendix. Before running the same code for the next year, update year in the file names for 1) the water year on the input files and master database, 2) output file name for the master database and the 3) ovga update file. The index.qmd of this repository contains the full code to process the data and produce this document."
  },
  {
    "objectID": "index.html#masterdb",
    "href": "index.html#masterdb",
    "title": "Groundwater data processing",
    "section": "\n3.1 export db file",
    "text": "3.1 export db file\n\nCompleted 1-24-24 annual update\nCompleted 1-24-24 full database\n\n\nsave master database updates# single year\ntestwell.up %&gt;% write_csv(here('output','testwellwy2023.csv'))\n\n# whole dataset\ntestwells.combined %&gt;% write_csv(here('output','Monitoring_Wells_Master_2023.csv'))\n\n#"
  },
  {
    "objectID": "index.html#ovgaupdate",
    "href": "index.html#ovgaupdate",
    "title": "Groundwater data processing",
    "section": "\n4.2 export ovga import file",
    "text": "4.2 export ovga import file\n\nsave OVGA importupload %&gt;% write_csv(here(\"output\",\"ovga_uploads_mw_with_rpe_102022_092023_zn.csv\"))\n\n\n\n\ndatatabledatatable(upload,\n  caption = '2022-2023 water year upload formatted for OVGA data managagement system.')"
  },
  {
    "objectID": "index.html#laws",
    "href": "index.html#laws",
    "title": "Groundwater data processing",
    "section": "\n5.1 Laws",
    "text": "5.1 Laws\n\n\n\n\nHydrographs of indicator wells in the Laws wellfield."
  },
  {
    "objectID": "index.html#bishop",
    "href": "index.html#bishop",
    "title": "Groundwater data processing",
    "section": "\n5.2 Bishop",
    "text": "5.2 Bishop\n\n\n\n\nHydrographs of indicator wells in the Bishop wellfield."
  },
  {
    "objectID": "index.html#big-pine",
    "href": "index.html#big-pine",
    "title": "Groundwater data processing",
    "section": "\n5.3 Big Pine",
    "text": "5.3 Big Pine\n\n\n\n\nHydrographs of indicator wells in the Big Pine wellfield. T565, and V017GC are in south Big Pine near W218/219."
  },
  {
    "objectID": "index.html#taboose-aberdeen",
    "href": "index.html#taboose-aberdeen",
    "title": "Groundwater data processing",
    "section": "\n5.4 Taboose Aberdeen",
    "text": "5.4 Taboose Aberdeen\n\n\n\n\nHydrographs of indicator wells in the Taboose-Aberdeen wellfield."
  },
  {
    "objectID": "index.html#thibaut-sawmill",
    "href": "index.html#thibaut-sawmill",
    "title": "Groundwater data processing",
    "section": "\n5.5 Thibaut Sawmill",
    "text": "5.5 Thibaut Sawmill\n\n\n\n\nHydrographs of indicator wells in Thibaut-Sawmill wellfield."
  },
  {
    "objectID": "index.html#independence-oak",
    "href": "index.html#independence-oak",
    "title": "Groundwater data processing",
    "section": "\n5.6 Independence Oak",
    "text": "5.6 Independence Oak\n\n\n\n\nHydrographs of indicator wells in Independence-Oak wellfield."
  },
  {
    "objectID": "index.html#symmes-shepherd",
    "href": "index.html#symmes-shepherd",
    "title": "Groundwater data processing",
    "section": "\n5.7 Symmes Shepherd",
    "text": "5.7 Symmes Shepherd\n\n\n\n\nHydrographs of indicator wells in Symmes-Shepherd wellfield."
  },
  {
    "objectID": "index.html#bairs-george",
    "href": "index.html#bairs-george",
    "title": "Groundwater data processing",
    "section": "\n5.8 Bairs George",
    "text": "5.8 Bairs George\n\n\n\n\nHydrographs of indicator wells in Bairs George wellfield.\n\n\n\n\n\n16 monitoring points missing rp elevation and omitted from import"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This record of data processing is useful internally to speed up these annual tasks. For the most part, the core of the processing has been automated here."
  },
  {
    "objectID": "index.html#ovgasave",
    "href": "index.html#ovgasave",
    "title": "Groundwater data processing",
    "section": "\n4.1 OVGA template",
    "text": "4.1 OVGA template\n\ncreate ovga template# methodinfer %&gt;% distinct()\nmethodinfer &lt;- record.number %&gt;% select(-count.with.rpe)\n# %&gt;% distinct(staid)\n\nupload &lt;- rpselect2 %&gt;% \n  left_join(methodinfer, by = \"staid\") %&gt;% \n  # select(-latest_rp_date) %&gt;% \n  select(WellName = staid, \n         DateMeasured = date, \n         DepthToWater = dtw.rp, \n         ReferencePointElevation = rp_elev\n         ,\n         MMethod\n         ) %&gt;% \n  mutate(ReportingDate = \"\",\n         # ExclusionCondition = \"\" ,\n         QAQCLevel = \"High\",\n         MeasMethod = MMethod,#\"ES\",# from join above\n         NoMeasFlag = \"\",\n         QuestMeasFlag = \"\",\n         DataSource = \"LADWP\",\n         CollectedBy = \"LADWP\",\n         UseInReporting = \"yes\",\n         Notes = \"\") %&gt;% \n  select(-MMethod)%&gt;%\n  filter(DepthToWater &lt; 500 & !is.na(DepthToWater) & DepthToWater != 'NA' & DepthToWater != -777 & ReferencePointElevation !=0) %&gt;% relocate(ReportingDate, .after = DateMeasured)\n\n# 13,955 rows for 2022-23 water year try upload and back down if we have fixes\n\n# upload %&gt;% group_by(WellName) %&gt;% summarise(records = n()) %&gt;% nrow()\n\n\nCompleted 1-24-24\ncsv\n\n19793 well-days in update with rp elevations\n769 staids in update with rp elevations\n15399 well-days in update with rp elevations and in ovga list\n698 staids in update with rp elevations and in ovga list\n13811 well-days in the ovga upload\n678 staids in the ovga upload"
  },
  {
    "objectID": "flow.html",
    "href": "flow.html",
    "title": "Flow Data",
    "section": "",
    "text": "Code  monthly_uses_syncplot&lt;- function(staid_p,data,group_name){\n    tm.an&lt;-data %&gt;% filter(staid == staid_p)\n    tm.an&lt;-zoo(x=tm.an$read, order.by=tm.an$date)\n    dygraph(tm.an,group=group_name) %&gt;%\n      dyBarChart() %&gt;%\n      dyAxis(\"y\", label = \"AF\") \n  }\n\n\n\n1 Data\n\nread datafile_path_flow &lt;-here('data','hydro','2022-23 Water Year Transfer Packet for ICWD','VolumeMonthAF_2022-23.dat')\n# annual update\n# ann.update &lt;- read_csv(here('data','hydro','VolumeMonthAF_2021-22.csv'))\n# summary_stations &lt;- 'data/summary_stations19-20.csv'\nsum_stations &lt;- read_csv(here('data','hydro','2022-23 Water Year Transfer Packet for ICWD','summary_stations22-23.csv'))\n\n# attribute data from wells database  \nstaidlist &lt;- read_csv(here('data','hydro','staid_current.csv'))\n\nproduction.meta &lt;- read_csv(here('data','hydro','Production.csv')) %&gt;% \n  select(mon_pt_name, method) %&gt;% unique()\n  \n#historical data\nmonthlies &lt;- read_csv(here('data','hydro','totals_means_thru_sep_2022.csv'))# \n\nflow.meta &lt;- read_csv(here('data','hydro','Flows.csv')) %&gt;%  select(mon_pt_name, LADWP_ID) %&gt;% unique() %&gt;% mutate(staid = as.character(LADWP_ID)) %&gt;% select(-LADWP_ID)\n\n# unique(production.meta$mon_pt_name)\n\n\n\nparse .dat asciidat_content &lt;- readLines(file_path_flow)\n\n# Initialize variables to store data\ndata_list &lt;- list()\n\n# Function to check if a line contains timestamp and value\nis_data_line &lt;- function(line) {\n  grepl(\"\\\\d+ \\\\d+\\\\.\\\\d+\", line)\n}\n\n# Loop through each line in the file\nfor (line in dat_content) {\n  # Check if the line starts with '#TSPATH'\n  if (startsWith(line, \"#TSPATH\")) {\n    # Extract 'staid' from the '#TSPATH' line\n    staid &lt;- sub('.*/([^/]+)/VOLUME/.*', '\\\\1', line)\n  }\n  \n  # Check if the line does not start with '#' and contains timestamp and value\n  if (!startsWith(line, \"#\") && is_data_line(line) && !is.na(staid)) {\n    # If the line does not start with '#' and contains timestamp and value,\n    # add data to the list directly\n    data_list &lt;- c(data_list, list(data.frame(staid, dateread = line)))\n  }\n}\n\n# Combine the data frames in the list into a single data frame\nann.update &lt;- dplyr::bind_rows(data_list)\n\n\n\nseparate date read column#separate the data column and assign numeric class to value\nann.update2 &lt;- ann.update %&gt;% separate(dateread, c(\"date\", \"read\"),sep = \" \") \nann.update2$read &lt;- as.numeric(ann.update2$read)\n\n\n\ndate columns# lubridate package to format the date\nann.update2$datetime &lt;- ymd_hms(ann.update2$date)\n\n\nann.update3&lt;-ann.update2 %&gt;% mutate(year = year(datetime),\n                            month = month(datetime),\n                            month_abbr = month(datetime, label = TRUE, abbr = TRUE),\n                            day = mday(datetime),\n                            date.y.m.d = make_date(year, month,day))\n\n# rename the columns\n# add the long form name for the station\nann.update4&lt;-ann.update3 %&gt;% select(-date)%&gt;% rename(date = date.y.m.d)%&gt;% left_join(staidlist, by = 'staid') %&gt;% select(staid,description,read,date,year,month,month_abbr) \n\n#tm master\nann.update5 &lt;- ann.update4 %&gt;% mutate(wy = case_when(month &gt;= 10 ~ year + 1,\n                                          month &lt;= 9 ~ year),\n                           roy = case_when(month &lt;= 3 ~ year - 1,\n                                           month &gt;= 4 ~ year),\n                           irrag = case_when(month %in% c(4,5,6,7,8,9) ~ year))\n\n\n\nsummary stations# wide to long format using gather()\nsstations &lt;- sum_stations %&gt;% gather(staid,read,-date) %&gt;% left_join(staidlist, by = 'staid') %&gt;% select(-desc_id)\n\n\n# sstations$date &lt;- mdy(sstations$date)\n\nsstations&lt;-sstations %&gt;% mutate(month = month(date),\n                                year = year(date),\n                                month_abbr = month(date, label = TRUE, abbr = TRUE))\n\n\n# sstations\n\n\n\nsplit into ovga and ic updates# with summary stations\nupdate.merged.ic &lt;- bind_rows(sstations,ann.update4)\n# without\nupdate.merged &lt;- ann.update4# for ovga, don't need summaries\n\n\n\n2 ICWD Flow export\n\nIC date columns# for ic master db\nupdate.merged.ic &lt;- update.merged.ic %&gt;% mutate(wy = case_when(month &gt;= 10 ~ year + 1,\n                                          month &lt;= 9 ~ year),\n                           roy = case_when(month &lt;= 3 ~ year - 1,\n                                           month &gt;= 4 ~ year),\n                           irrag = case_when(month %in% c(4,5,6,7,8,9) ~ year))\n\n\n\nupdate IC DBupdate.merged3 &lt;- bind_rows(update.merged.ic, monthlies)\n# tm_all_merged\n\n# update.merged3 %&gt;% get_dupes()\n# 0\n\n\n\nwrite updated IC DB# update.merged3 %&gt;% write_csv('totals_means_thru_sep_2021.csv')\nupdate.merged3 %&gt;% write_csv(here('data','hydro','totals_means_thru_sep_2023.csv'))\nupdate.merged3 %&gt;% write_csv(here('output','totals_means_thru_sep_2023.csv'))\n\n\n\n3 OVGA\n\nfilter no value -777tm &lt;- ann.update5 %&gt;% filter(read != -777)\n# tm\n\n\n\nsplit flow vs productionproddf &lt;- tm %&gt;% filter(str_detect(staid, \"[[:alpha:]]\"))\nflowdf &lt;- tm %&gt;% filter(!str_detect(staid, \"[[:alpha:]]\"))%&gt;%\n  mutate(staid = ifelse(str_detect(staid, \"^0\"), str_replace(staid, \"^0+\", \"\"), staid))\n\n\nflow_ovga &lt;- flowdf %&gt;% left_join(flow.meta, by = 'staid') \n# %&gt;% filter(!is.na(mon_pt_name))\n\n# 6758+2244\n\n\n\novga flow columnssw.flow &lt;- flow_ovga  %&gt;% \n  mutate(WellName = mon_pt_name,\n         FlowDate = date,\n         FlowRateAcFtPM = read,\n         FlowRateCFS = \"\",\n         FlowRateGPM = \"\") %&gt;% \n  select(WellName,FlowDate,FlowRateAcFtPM, FlowRateCFS, FlowRateGPM)\n  # filter(FlowRateAcFtPM &lt; 600000) %&gt;%\n\n# columns up to date 1/30/24 zn\nsw.flow %&gt;% datatable()\n\n\n\n\n\n\n\nfind/remove duplicatesdupes &lt;- sw.flow %&gt;% get_dupes() \n\nswflow2 &lt;- sw.flow %&gt;% anti_join(dupes)\n\n\n\n4 OVGA Flow export\n\nwrite ovga flowswflow2 %&gt;% write_csv(here(\"output\",\"ovga_swflow_import_wy23.csv\"))\n\n\n\novga production columnsprod_ovga &lt;- proddf %&gt;% left_join(production.meta, by = c('staid' = 'mon_pt_name'))  \n\ntm.well.flow &lt;- prod_ovga %&gt;% \n  mutate(WellName = staid,\n         StartDate = date,\n         EndDate = ceiling_date(date,'month'),\n         AgUsageAF = '',\n         MIUsageAF = read,\n         TotalUsageAF = read,\n         Method = method,\n         Notes = '') %&gt;% \n  select(WellName,StartDate,EndDate, AgUsageAF, MIUsageAF, TotalUsageAF, Method, Notes)\n\n#up to date 1-30-24\n\n\n\n5 OVGA Production export\n\nCodetm.well.flow%&gt;% datatable()\n\n\n\n\n\n\n\nfind/replace duplicatesdupeswell &lt;- tm.well.flow %&gt;% get_dupes() \n# 0\n# tmwellflow &lt;- tm.well.flow %&gt;% anti_join(dupeswell)\n\n\n\nwrite ovga productiontm.well.flow %&gt;% write_csv(here(\"output\",\"ovga_production_import_wy22-23.csv\"))\n\n\n\n6 OVR Owens Valley Runoff\n\nCodetm2 &lt;- update.merged3\nmonthly_uses_syncplot(staid_p = \"OVR\" ,data = tm2, group_name = 'ov')\n\n\nOwens Valley Runoff\n\n\n\n7 OVPW Owens Valley Pumped Water\n\nCodemonthly_uses_syncplot(staid_p = \"OVPW\" ,data = tm2, group_name = 'ov')\n\n\nOwens Valley Pumped Water\n\n\n\n8 FTC L.A.A. Total Flow to the City\n\nCodemonthly_uses_syncplot(staid_p = \"FTC\" ,data = tm2, group_name = 'ov')\n\n\nLAA Total Flow to the City\n\n\n\n9 LOLU Lower Owens River Project – Lakes and Ponds Use\n\nCodemonthly_uses_syncplot(staid_p = \"LOLU\" ,data = tm2, group_name = 'ov')\n\n\nLower Owens River Project – Lakes and Ponds Use\n\n\n\n10 LOOU Lower Owens River Project – Operations\n\nCodemonthly_uses_syncplot(staid_p = \"LOOU\" ,data = tm2, group_name = 'ov')\n\n\nLower Owens River Project – Operations\n\n\n\n11 LORPDU Lower Owens River – Delta Uses\n\nCodemonthly_uses_syncplot(staid_p = \"LORPDU\" ,data = tm2, group_name = 'ov')\n\n\nLower Owens River – Delta Uses\n\n\n\n12 LORPRU Lower Owens River – River Uses\n\nCodemonthly_uses_syncplot(staid_p = \"LORPRU\" ,data = tm2, group_name = 'ov')\n\n\nLower Owens River – River Uses\n\n\n\n13 LORPTU Lower Owens River Project Total Uses\n\nCodemonthly_uses_syncplot(staid_p = \"LORPTU\" ,data = tm2, group_name = 'ov')\n\n\nLower Owens River Project Total Uses\n\n\n\n14 LOWU Lower Owens River Project – Waterfowl Uses\n\nCodemonthly_uses_syncplot(staid_p = \"LOWU\" ,data = tm2, group_name = 'ov')\n\n\nLower Owens River Project – Waterfowl Uses\n\n\n\n15 MBR Mono Basin Runoff\n\nCodemonthly_uses_syncplot(staid_p = \"MBR\" ,data = tm2, group_name = 'ov')\n\n\nMono Basin Runoff\n\n\n\n16 MTWP Mono Tunnel at West Portal\n\nCodemonthly_uses_syncplot(staid_p = \"MTWP\" ,data = tm2, group_name = 'ov')\n\n\nMono Tunnel at West Portal\n\n\n\n17 OLTU Owens Lake Total Uses\n\nCodemonthly_uses_syncplot(staid_p = \"OLTU\" ,data = tm2, group_name = 'ov')\n\n\nOwens Lake Total Uses\n\n\n\n18 OVFG Owens Valley Flowing Groundwater\n\nCodemonthly_uses_syncplot(staid_p = \"OVFG\" ,data = tm2, group_name = 'ov')\n\n\nOwens Valley Flowing Groundwater\n\n\n\n19 OVGR Owens Valley Groundwater Recharge\n\nCodemonthly_uses_syncplot(staid_p = \"OVGR\" ,data = tm2, group_name = 'ov')\n\n\nOwens Valley Groundwater Recharge\n\n\n\n20 OVIR Owens Valley Irrigation\n\nCodemonthly_uses_syncplot(staid_p = \"OVIR\" ,data = tm2, group_name = 'ov')\n\n\nOwens Valley Irrigation\n\n\n\n21 SHTO South Haiwee Total Outflow (1+2+3+BP)\n\nCodemonthly_uses_syncplot(staid_p = \"SHTO\" ,data = tm2, group_name = 'ov')\n\n\nSouth Haiwee Total Outflow (1+2+3+BP)\n\n\n\n\nCitationBibTeX citation:@report{nelson2023,\n  author = {Nelson, Zach},\n  publisher = {Inyo County Water Department},\n  title = {Flow {Data}},\n  date = {2023-01-30},\n  url = {https://zach-nelson.github.io/ovgw/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nNelson, Zach. 2023. “Flow Data.” Data Report. Inyo\nCounty Water Department. https://zach-nelson.github.io/ovgw/."
  },
  {
    "objectID": "flow.html#summary-stations",
    "href": "flow.html#summary-stations",
    "title": "Flow Data",
    "section": "\n2.1 summary stations",
    "text": "2.1 summary stations\n\nCode# sum_stations\n\n\n\nsummary stations# wide to long format using gather()\nsstations &lt;- sum_stations %&gt;% gather(staid,read,-date) %&gt;% left_join(staidlist, by = 'staid') %&gt;% select(-desc_id)\n\n\n# sstations$date &lt;- mdy(sstations$date)\n\nsstations&lt;-sstations %&gt;% mutate(month = month(date),\n                                year = year(date),\n                                month_abbr = month(date, label = TRUE, abbr = TRUE))\n\n\n# sstations"
  },
  {
    "objectID": "flow.html#merge-all",
    "href": "flow.html#merge-all",
    "title": "Flow Data",
    "section": "\n2.2 merge all",
    "text": "2.2 merge all\n\nsplit into ovga and ic updates# with summary stations\nupdate.merged.ic &lt;- bind_rows(sstations,ann.update4)\n# without\nupdate.merged &lt;- ann.update4# for ovga, don't need summaries"
  },
  {
    "objectID": "flow.html#ic-dates",
    "href": "flow.html#ic-dates",
    "title": "Flow Data",
    "section": "\n2.3 IC dates",
    "text": "2.3 IC dates\n\nIC date columns# for ic master db\nupdate.merged.ic &lt;- update.merged.ic %&gt;% mutate(wy = case_when(month &gt;= 10 ~ year + 1,\n                                          month &lt;= 9 ~ year),\n                           roy = case_when(month &lt;= 3 ~ year - 1,\n                                           month &gt;= 4 ~ year),\n                           irrag = case_when(month %in% c(4,5,6,7,8,9) ~ year))"
  },
  {
    "objectID": "flow.html#ic-merge-old-and-new",
    "href": "flow.html#ic-merge-old-and-new",
    "title": "Flow Data",
    "section": "\n2.4 IC Merge old and new",
    "text": "2.4 IC Merge old and new\n\nupdate IC DBupdate.merged3 &lt;- bind_rows(update.merged.ic, monthlies)\n# tm_all_merged\n\nupdate.merged3 %&gt;% get_dupes()\n\n# A tibble: 0 × 11\n# ℹ 11 variables: date &lt;date&gt;, staid &lt;chr&gt;, read &lt;dbl&gt;, description &lt;chr&gt;,\n#   month &lt;dbl&gt;, year &lt;dbl&gt;, month_abbr &lt;chr&gt;, wy &lt;dbl&gt;, roy &lt;dbl&gt;,\n#   irrag &lt;dbl&gt;, dupe_count &lt;int&gt;\n\nupdate IC DB# 0\n\n\n\nwrite updated IC DB# update.merged3 %&gt;% write_csv('totals_means_thru_sep_2021.csv')\nupdate.merged3 %&gt;% write_csv(here('data','hydro','totals_means_thru_sep_2023.csv'))\nupdate.merged3 %&gt;% write_csv(here('output','totals_means_thru_sep_2023.csv'))"
  },
  {
    "objectID": "flow.html#ovga-dates",
    "href": "flow.html#ovga-dates",
    "title": "Flow Data",
    "section": "\n3.1 OVGA dates",
    "text": "3.1 OVGA dates\n\novga date columns# for ovga\nupdate.merged2 &lt;- update.merged %&gt;% mutate(wy = case_when(month &gt;= 10 ~ year + 1,\n                                          month &lt;= 9 ~ year),\n                           roy = case_when(month &lt;= 3 ~ year - 1,\n                                           month &gt;= 4 ~ year),\n                           irrag = case_when(month %in% c(4,5,6,7,8,9) ~ year))\n\n\n\nCodetm_process_for_ovga &lt;- update.merged2\n\n\nWellName The WellName column is required and must contain the name of a monitoring point within the basin selected when the file was uploaded.\nFlowDate The FlowDate column is required. The field must be a date.\nFlowRateAcFtPM The FlowRateAcFtPM column is required and must be numeric. Units are in acre-foot per month"
  }
]